(function(){"use strict";/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const q="172";function p(x,t,i){return Math.max(t,Math.min(i,x))}class V{constructor(t=0,i=0,s=0,h=1){this.isQuaternion=!0,this._x=t,this._y=i,this._z=s,this._w=h}static slerpFlat(t,i,s,h,e,l,c){let y=s[h+0],r=s[h+1],o=s[h+2],a=s[h+3];const u=e[l+0],n=e[l+1],_=e[l+2],w=e[l+3];if(c===0){t[i+0]=y,t[i+1]=r,t[i+2]=o,t[i+3]=a;return}if(c===1){t[i+0]=u,t[i+1]=n,t[i+2]=_,t[i+3]=w;return}if(a!==w||y!==u||r!==n||o!==_){let g=1-c;const f=y*u+r*n+o*_+a*w,P=f>=0?1:-1,N=1-f*f;if(N>Number.EPSILON){const m=Math.sqrt(N),T=Math.atan2(m,f*P);g=Math.sin(g*T)/m,c=Math.sin(c*T)/m}const C=c*P;if(y=y*g+u*C,r=r*g+n*C,o=o*g+_*C,a=a*g+w*C,g===1-c){const m=1/Math.sqrt(y*y+r*r+o*o+a*a);y*=m,r*=m,o*=m,a*=m}}t[i]=y,t[i+1]=r,t[i+2]=o,t[i+3]=a}static multiplyQuaternionsFlat(t,i,s,h,e,l){const c=s[h],y=s[h+1],r=s[h+2],o=s[h+3],a=e[l],u=e[l+1],n=e[l+2],_=e[l+3];return t[i]=c*_+o*a+y*n-r*u,t[i+1]=y*_+o*u+r*a-c*n,t[i+2]=r*_+o*n+c*u-y*a,t[i+3]=o*_-c*a-y*u-r*n,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,i,s,h){return this._x=t,this._y=i,this._z=s,this._w=h,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,i=!0){const s=t._x,h=t._y,e=t._z,l=t._order,c=Math.cos,y=Math.sin,r=c(s/2),o=c(h/2),a=c(e/2),u=y(s/2),n=y(h/2),_=y(e/2);switch(l){case"XYZ":this._x=u*o*a+r*n*_,this._y=r*n*a-u*o*_,this._z=r*o*_+u*n*a,this._w=r*o*a-u*n*_;break;case"YXZ":this._x=u*o*a+r*n*_,this._y=r*n*a-u*o*_,this._z=r*o*_-u*n*a,this._w=r*o*a+u*n*_;break;case"ZXY":this._x=u*o*a-r*n*_,this._y=r*n*a+u*o*_,this._z=r*o*_+u*n*a,this._w=r*o*a-u*n*_;break;case"ZYX":this._x=u*o*a-r*n*_,this._y=r*n*a+u*o*_,this._z=r*o*_-u*n*a,this._w=r*o*a+u*n*_;break;case"YZX":this._x=u*o*a+r*n*_,this._y=r*n*a+u*o*_,this._z=r*o*_-u*n*a,this._w=r*o*a-u*n*_;break;case"XZY":this._x=u*o*a-r*n*_,this._y=r*n*a-u*o*_,this._z=r*o*_+u*n*a,this._w=r*o*a+u*n*_;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+l)}return i===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,i){const s=i/2,h=Math.sin(s);return this._x=t.x*h,this._y=t.y*h,this._z=t.z*h,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(t){const i=t.elements,s=i[0],h=i[4],e=i[8],l=i[1],c=i[5],y=i[9],r=i[2],o=i[6],a=i[10],u=s+c+a;if(u>0){const n=.5/Math.sqrt(u+1);this._w=.25/n,this._x=(o-y)*n,this._y=(e-r)*n,this._z=(l-h)*n}else if(s>c&&s>a){const n=2*Math.sqrt(1+s-c-a);this._w=(o-y)/n,this._x=.25*n,this._y=(h+l)/n,this._z=(e+r)/n}else if(c>a){const n=2*Math.sqrt(1+c-s-a);this._w=(e-r)/n,this._x=(h+l)/n,this._y=.25*n,this._z=(y+o)/n}else{const n=2*Math.sqrt(1+a-s-c);this._w=(l-h)/n,this._x=(e+r)/n,this._y=(y+o)/n,this._z=.25*n}return this._onChangeCallback(),this}setFromUnitVectors(t,i){let s=t.dot(i)+1;return s<Number.EPSILON?(s=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=s):(this._x=0,this._y=-t.z,this._z=t.y,this._w=s)):(this._x=t.y*i.z-t.z*i.y,this._y=t.z*i.x-t.x*i.z,this._z=t.x*i.y-t.y*i.x,this._w=s),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(p(this.dot(t),-1,1)))}rotateTowards(t,i){const s=this.angleTo(t);if(s===0)return this;const h=Math.min(1,i/s);return this.slerp(t,h),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,i){const s=t._x,h=t._y,e=t._z,l=t._w,c=i._x,y=i._y,r=i._z,o=i._w;return this._x=s*o+l*c+h*r-e*y,this._y=h*o+l*y+e*c-s*r,this._z=e*o+l*r+s*y-h*c,this._w=l*o-s*c-h*y-e*r,this._onChangeCallback(),this}slerp(t,i){if(i===0)return this;if(i===1)return this.copy(t);const s=this._x,h=this._y,e=this._z,l=this._w;let c=l*t._w+s*t._x+h*t._y+e*t._z;if(c<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,c=-c):this.copy(t),c>=1)return this._w=l,this._x=s,this._y=h,this._z=e,this;const y=1-c*c;if(y<=Number.EPSILON){const n=1-i;return this._w=n*l+i*this._w,this._x=n*s+i*this._x,this._y=n*h+i*this._y,this._z=n*e+i*this._z,this.normalize(),this}const r=Math.sqrt(y),o=Math.atan2(r,c),a=Math.sin((1-i)*o)/r,u=Math.sin(i*o)/r;return this._w=l*a+this._w*u,this._x=s*a+this._x*u,this._y=h*a+this._y*u,this._z=e*a+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,i,s){return this.copy(t).slerp(i,s)}random(){const t=2*Math.PI*Math.random(),i=2*Math.PI*Math.random(),s=Math.random(),h=Math.sqrt(1-s),e=Math.sqrt(s);return this.set(h*Math.sin(t),h*Math.cos(t),e*Math.sin(i),e*Math.cos(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,i=0){return this._x=t[i],this._y=t[i+1],this._z=t[i+2],this._w=t[i+3],this._onChangeCallback(),this}toArray(t=[],i=0){return t[i]=this._x,t[i+1]=this._y,t[i+2]=this._z,t[i+3]=this._w,t}fromBufferAttribute(t,i){return this._x=t.getX(i),this._y=t.getY(i),this._z=t.getZ(i),this._w=t.getW(i),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class z{constructor(t=0,i=0,s=0){z.prototype.isVector3=!0,this.x=t,this.y=i,this.z=s}set(t,i,s){return s===void 0&&(s=this.z),this.x=t,this.y=i,this.z=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this.z=t.z+i.z,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this.z+=t.z*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this.z=t.z-i.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,i){return this.x=t.x*i.x,this.y=t.y*i.y,this.z=t.z*i.z,this}applyEuler(t){return this.applyQuaternion(A.setFromEuler(t))}applyAxisAngle(t,i){return this.applyQuaternion(A.setFromAxisAngle(t,i))}applyMatrix3(t){const i=this.x,s=this.y,h=this.z,e=t.elements;return this.x=e[0]*i+e[3]*s+e[6]*h,this.y=e[1]*i+e[4]*s+e[7]*h,this.z=e[2]*i+e[5]*s+e[8]*h,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const i=this.x,s=this.y,h=this.z,e=t.elements,l=1/(e[3]*i+e[7]*s+e[11]*h+e[15]);return this.x=(e[0]*i+e[4]*s+e[8]*h+e[12])*l,this.y=(e[1]*i+e[5]*s+e[9]*h+e[13])*l,this.z=(e[2]*i+e[6]*s+e[10]*h+e[14])*l,this}applyQuaternion(t){const i=this.x,s=this.y,h=this.z,e=t.x,l=t.y,c=t.z,y=t.w,r=2*(l*h-c*s),o=2*(c*i-e*h),a=2*(e*s-l*i);return this.x=i+y*r+l*a-c*o,this.y=s+y*o+c*r-e*a,this.z=h+y*a+e*o-l*r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const i=this.x,s=this.y,h=this.z,e=t.elements;return this.x=e[0]*i+e[4]*s+e[8]*h,this.y=e[1]*i+e[5]*s+e[9]*h,this.z=e[2]*i+e[6]*s+e[10]*h,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,i){return this.x=p(this.x,t.x,i.x),this.y=p(this.y,t.y,i.y),this.z=p(this.z,t.z,i.z),this}clampScalar(t,i){return this.x=p(this.x,t,i),this.y=p(this.y,t,i),this.z=p(this.z,t,i),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(p(s,t,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this.z+=(t.z-this.z)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this.z=t.z+(i.z-t.z)*s,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,i){const s=t.x,h=t.y,e=t.z,l=i.x,c=i.y,y=i.z;return this.x=h*y-e*c,this.y=e*l-s*y,this.z=s*c-h*l,this}projectOnVector(t){const i=t.lengthSq();if(i===0)return this.set(0,0,0);const s=t.dot(this)/i;return this.copy(t).multiplyScalar(s)}projectOnPlane(t){return S.copy(this).projectOnVector(t),this.sub(S)}reflect(t){return this.sub(S.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const i=Math.sqrt(this.lengthSq()*t.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(t)/i;return Math.acos(p(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const i=this.x-t.x,s=this.y-t.y,h=this.z-t.z;return i*i+s*s+h*h}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,i,s){const h=Math.sin(i)*t;return this.x=h*Math.sin(s),this.y=Math.cos(i)*t,this.z=h*Math.cos(s),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,i,s){return this.x=t*Math.sin(i),this.y=s,this.z=t*Math.cos(i),this}setFromMatrixPosition(t){const i=t.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this}setFromMatrixScale(t){const i=this.setFromMatrixColumn(t,0).length(),s=this.setFromMatrixColumn(t,1).length(),h=this.setFromMatrixColumn(t,2).length();return this.x=i,this.y=s,this.z=h,this}setFromMatrixColumn(t,i){return this.fromArray(t.elements,i*4)}setFromMatrix3Column(t,i){return this.fromArray(t.elements,i*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this.z=t[i+2],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t[i+2]=this.z,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this.z=t.getZ(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,i=Math.random()*2-1,s=Math.sqrt(1-i*i);return this.x=s*Math.cos(t),this.y=i,this.z=s*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const S=new z,A=new V;typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:q}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=q),console.log("init");let d=new Map,M=[],b=!1,I=100,L=10,Q=.01,j=.1,Z=1,E=50;class R{index=new Map;update(t){this.index.clear();for(let i of t.values()){let s=JSON.stringify(i.position.clone().multiplyScalar(1/(E*2)).floor()),h=this.index.get(s);h!==void 0?h.push(i):this.index.set(s,[i])}}getEffectedNodes(t){let i=[t.clone().multiplyScalar(1/(E*2)).round()];i.push(i[0].clone().add({x:-1,y:0,z:0})),i.push(i[0].clone().add({x:0,y:-1,z:0})),i.push(i[0].clone().add({x:0,y:0,z:-1})),i.push(i[0].clone().add({x:-1,y:-1,z:0})),i.push(i[0].clone().add({x:0,y:-1,z:-1})),i.push(i[0].clone().add({x:-1,y:0,z:-1})),i.push(i[0].clone().add({x:-1,y:-1,z:-1}));let s=[];for(let h of i){let e=this.index.get(JSON.stringify(h))??[];for(let l of e)new z().subVectors(t,l.position).length()<E&&s.push(l)}return s}}self.onmessage=x=>{let t=x.data;if(t.graph!==void 0&&(d=new Map,M=[],t.graph.states.forEach(i=>{let s=new z;s.random(),s.add(new z(-.5,-.5,-.5)),d.set(i.id,{position:s,velocity:new z,force:new z(0,0,0),neighbors:[],pinned:!1})}),d.set(t.graph.initial_state.id,{position:new z(0,0,0),velocity:new z(0,0,0),force:new z(0,0,0),neighbors:[],pinned:!0}),t.graph.edges.forEach(i=>{if(i.source===i.target)return;let s=d.get(i.source),h=d.get(i.target);if(s===void 0||h===void 0)throw new Error("An id was provided in the edge list but not the list of nodes");s.neighbors.includes(h)||s.neighbors.push(h),h.neighbors.includes(s)||h.neighbors.push(s);const e=[i.source,i.target].sort();M.find(l=>l[0]===e[0]&&l[1]===e[1])===void 0&&M.push(e)}),requestAnimationFrame(k)),t.togglePin!==void 0){let i=d.get(t.togglePin);i!==void 0&&(i.pinned=!i.pinned,i.velocity.set(0,0,0))}t.pause!==void 0&&(b&&!t.pause&&requestAnimationFrame(k),b=t.pause)};let F=new R;const k=()=>{performance.mark("PhysicsStart"),F.update(d);const x=new z;M.forEach(i=>{let s=d.get(i[0]),h=d.get(i[1]);if(s===void 0||h===void 0)throw new Error("An id was provided in the edge list but not the list of nodes");s.pinned&&h.pinned||(h.pinned&&([s,h]=[h,s]),x.subVectors(h.position,s.position),x.setLength(L-x.length()),x.multiplyScalar(j),s.pinned?h.force.add(x):(x.multiplyScalar(.5),h.force.add(x),x.multiplyScalar(-1),s.force.add(x)))});for(const i of d.values())if(!i.pinned)for(const s of F.getEffectedNodes(i.position)){if(i===s)continue;x.subVectors(i.position,s.position);let h=x.lengthSq();i.force.add(x.normalize().multiplyScalar(Z*(1/h)))}for(const i of d.values())i.velocity.add(i.force),i.velocity.multiplyScalar(1-Q).clampLength(0,I),i.position.add(i.velocity),i.force.set(0,0,0);let t=[];for(const[i,s]of d.entries())t.push({id:i,position:s.position});self.postMessage(t),b||requestAnimationFrame(k),performance.mark("PhysicsEnd"),performance.measure("PhysicsTime","PhysicsStart","PhysicsEnd")}})();
